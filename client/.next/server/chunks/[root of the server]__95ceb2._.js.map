{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/halil/VSCodeProjects/steam_worth/app/api/fetchGames/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\n\r\ninterface Game {\r\n  appid: number;\r\n}\r\n\r\nexport async function GET(req: NextRequest) {\r\n  const { searchParams } = new URL(req.url);\r\n  const id = searchParams.get('id');\r\n  const key = process.env.STEAM_API_KEY;\r\n  \r\n  if (!id) {\r\n    console.log(\"insufficient ID\");\r\n  }\r\n\r\n  try {\r\n    const games = await fetch(\r\n      `https://api.steampowered.com/IPlayerService/GetOwnedGames/v0001/?key=${key}&steamid=${id}&format=json`\r\n    );\r\n    const gamesData = await games.json();\r\n    const gamesIDs: Array<Game> = gamesData.response.games;\r\n\r\n    \r\n    const requests = gamesIDs.map((game) =>\r\n      fetch(`http://127.0.0.1:8000/games/${game.appid}`)\r\n        .then(async (res) => {\r\n          if (!res.ok) {\r\n            console.error(`Error fetching details for appid ${game.appid}: HTTP ${res.status}`);\r\n            return null;\r\n          }\r\n          const text = await res.text(); \r\n          try {\r\n            return JSON.parse(text); \r\n          } catch (err) {\r\n            console.error(`Error parsing JSON for appid ${game.appid}: ${err}`);\r\n            return null;\r\n          }\r\n        })\r\n    );\r\n    \r\n    const results = await Promise.all(requests);\r\n    const validResults = results.filter((result) => result !== null);\r\n    const total = validResults.reduce((sum, game) => {\r\n      if (game?.price !== undefined) {\r\n        return sum + game.price;\r\n      }\r\n      return sum;\r\n    }, 0);\r\n    \r\n    console.log(total)\r\n\r\n    return NextResponse.json(\r\n      { gamesValue: total.toFixed(2) },\r\n      { status: 200 }\r\n    );\r\n  } catch (error) {\r\n    console.log(error);\r\n    return NextResponse.json(error, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAMO,eAAe,IAAI,GAAgB;IACxC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,IAAI,GAAG;IACxC,MAAM,KAAK,aAAa,GAAG,CAAC;IAC5B,MAAM,MAAM,QAAQ,GAAG,CAAC,aAAa;IAErC,IAAI,CAAC,IAAI;QACP,QAAQ,GAAG,CAAC;IACd;IAEA,IAAI;QACF,MAAM,QAAQ,MAAM,MAClB,CAAC,qEAAqE,EAAE,IAAI,SAAS,EAAE,GAAG,YAAY,CAAC;QAEzG,MAAM,YAAY,MAAM,MAAM,IAAI;QAClC,MAAM,WAAwB,UAAU,QAAQ,CAAC,KAAK;QAGtD,MAAM,WAAW,SAAS,GAAG,CAAC,CAAC,OAC7B,MAAM,CAAC,4BAA4B,EAAE,KAAK,KAAK,EAAE,EAC9C,IAAI,CAAC,OAAO;gBACX,IAAI,CAAC,IAAI,EAAE,EAAE;oBACX,QAAQ,KAAK,CAAC,CAAC,iCAAiC,EAAE,KAAK,KAAK,CAAC,OAAO,EAAE,IAAI,MAAM,EAAE;oBAClF,OAAO;gBACT;gBACA,MAAM,OAAO,MAAM,IAAI,IAAI;gBAC3B,IAAI;oBACF,OAAO,KAAK,KAAK,CAAC;gBACpB,EAAE,OAAO,KAAK;oBACZ,QAAQ,KAAK,CAAC,CAAC,6BAA6B,EAAE,KAAK,KAAK,CAAC,EAAE,EAAE,KAAK;oBAClE,OAAO;gBACT;YACF;QAGJ,MAAM,UAAU,MAAM,QAAQ,GAAG,CAAC;QAClC,MAAM,eAAe,QAAQ,MAAM,CAAC,CAAC,SAAW,WAAW;QAC3D,MAAM,QAAQ,aAAa,MAAM,CAAC,CAAC,KAAK;YACtC,IAAI,MAAM,UAAU,WAAW;gBAC7B,OAAO,MAAM,KAAK,KAAK;YACzB;YACA,OAAO;QACT,GAAG;QAEH,QAAQ,GAAG,CAAC;QAEZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,YAAY,MAAM,OAAO,CAAC;QAAG,GAC/B;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,GAAG,CAAC;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,OAAO;YAAE,QAAQ;QAAI;IAChD;AACF"}},
    {"offset": {"line": 105, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}